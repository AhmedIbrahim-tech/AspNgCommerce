{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(http) {\n    this.http = http;\n  }\n  GetListOfProducts(shopparam) {\n    let param = new HttpParams();\n    if (shopparam.brandId > 0) param = param.append('BrandId', shopparam.brandId);\n    if (shopparam.typeId > 0) param = param.append('TypeId', shopparam.typeId);\n    if (shopparam.sort) param = param.append('Sort', shopparam.sort);\n    if (shopparam.pageNumber) param = param.append('pageIndex', shopparam.pageNumber);\n    if (shopparam.pageSize) param = param.append('pageSize', shopparam.pageSize);\n    if (shopparam.Search) param = param.append('Search', shopparam.Search);\n    return this.http.get(environment.APIURL + '/SpecificationsProduct/ListProduct', {\n      params: param\n    });\n  }\n  GetBrands() {\n    return this.http.get(environment.APIURL + '/SpecificationsProduct/ProductBrands');\n  }\n  GetType() {\n    return this.http.get(environment.APIURL + '/SpecificationsProduct/ProductTypes');\n  }\n  getSingleProduct(id) {\n    return this.http.get(environment.APIURL + '/SpecificationsProduct/GetByID/' + id);\n  }\n  static #_ = this.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpParams","environment","ProductService","constructor","http","GetListOfProducts","shopparam","param","brandId","append","typeId","sort","pageNumber","pageSize","Search","get","APIURL","params","GetBrands","GetType","getSingleProduct","id","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Ahmed Eprahim\\Desktop\\Mine\\AspNgCommerce\\lieblings\\src\\app\\product\\Service\\product.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Pagination } from 'src/app/shared/Models/Pagination';\r\nimport { IProduct } from 'src/app/shared/Models/Product';\r\nimport { ShopParams } from 'src/app/shared/Models/ShopParams';\r\nimport { IBrand } from 'src/app/shared/Models/brand';\r\nimport { IType } from 'src/app/shared/Models/type';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  GetListOfProducts(shopparam: ShopParams) {\r\n\r\n    let param = new HttpParams();\r\n    if (shopparam.brandId > 0)  param = param.append('BrandId', shopparam.brandId);\r\n    if (shopparam.typeId > 0)   param = param.append('TypeId', shopparam.typeId);\r\n    if (shopparam.sort)         param = param.append('Sort', shopparam.sort);\r\n    if (shopparam.pageNumber)    param = param.append('pageIndex', shopparam.pageNumber);\r\n    if (shopparam.pageSize)     param = param.append('pageSize', shopparam.pageSize);\r\n    if (shopparam.Search)       param = param.append('Search', shopparam.Search);\r\n\r\n    return this.http.get<Pagination<IProduct[]>>(environment.APIURL + '/SpecificationsProduct/ListProduct', {\r\n      params: param,\r\n    });\r\n  }\r\n\r\n  GetBrands() {\r\n    return this.http.get<IBrand[]>(environment.APIURL + '/SpecificationsProduct/ProductBrands');\r\n  }\r\n\r\n  GetType() {\r\n    return this.http.get<IType[]>(environment.APIURL + '/SpecificationsProduct/ProductTypes');\r\n  }\r\n\r\n  getSingleProduct(id: number) {\r\n    return this.http.get<IProduct>(environment.APIURL + '/SpecificationsProduct/GetByID/' + id);\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAAqBA,UAAU,QAAQ,sBAAsB;AAO7D,SAASC,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,iBAAiBA,CAACC,SAAqB;IAErC,IAAIC,KAAK,GAAG,IAAIP,UAAU,EAAE;IAC5B,IAAIM,SAAS,CAACE,OAAO,GAAG,CAAC,EAAGD,KAAK,GAAGA,KAAK,CAACE,MAAM,CAAC,SAAS,EAAEH,SAAS,CAACE,OAAO,CAAC;IAC9E,IAAIF,SAAS,CAACI,MAAM,GAAG,CAAC,EAAIH,KAAK,GAAGA,KAAK,CAACE,MAAM,CAAC,QAAQ,EAAEH,SAAS,CAACI,MAAM,CAAC;IAC5E,IAAIJ,SAAS,CAACK,IAAI,EAAUJ,KAAK,GAAGA,KAAK,CAACE,MAAM,CAAC,MAAM,EAAEH,SAAS,CAACK,IAAI,CAAC;IACxE,IAAIL,SAAS,CAACM,UAAU,EAAKL,KAAK,GAAGA,KAAK,CAACE,MAAM,CAAC,WAAW,EAAEH,SAAS,CAACM,UAAU,CAAC;IACpF,IAAIN,SAAS,CAACO,QAAQ,EAAMN,KAAK,GAAGA,KAAK,CAACE,MAAM,CAAC,UAAU,EAAEH,SAAS,CAACO,QAAQ,CAAC;IAChF,IAAIP,SAAS,CAACQ,MAAM,EAAQP,KAAK,GAAGA,KAAK,CAACE,MAAM,CAAC,QAAQ,EAAEH,SAAS,CAACQ,MAAM,CAAC;IAE5E,OAAO,IAAI,CAACV,IAAI,CAACW,GAAG,CAAyBd,WAAW,CAACe,MAAM,GAAG,oCAAoC,EAAE;MACtGC,MAAM,EAAEV;KACT,CAAC;EACJ;EAEAW,SAASA,CAAA;IACP,OAAO,IAAI,CAACd,IAAI,CAACW,GAAG,CAAWd,WAAW,CAACe,MAAM,GAAG,sCAAsC,CAAC;EAC7F;EAEAG,OAAOA,CAAA;IACL,OAAO,IAAI,CAACf,IAAI,CAACW,GAAG,CAAUd,WAAW,CAACe,MAAM,GAAG,qCAAqC,CAAC;EAC3F;EAEAI,gBAAgBA,CAACC,EAAU;IACzB,OAAO,IAAI,CAACjB,IAAI,CAACW,GAAG,CAAWd,WAAW,CAACe,MAAM,GAAG,iCAAiC,GAAGK,EAAE,CAAC;EAC7F;EAAC,QAAAC,CAAA,G;qBA7BUpB,cAAc,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdzB,cAAc;IAAA0B,OAAA,EAAd1B,cAAc,CAAA2B,IAAA;IAAAC,UAAA,EAFb;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}